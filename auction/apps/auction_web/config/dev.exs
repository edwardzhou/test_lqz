use Mix.Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with brunch.io to recompile .js and .css sources.
config :auction_web, AuctionWeb.Endpoint,
  # http: [
  #   ip: fn -> 
  #     case :inet_parse.address(to_charlist(System.get_env("IP"))) do
  #       {:ok, ip} -> ip
  #       _ -> nil
  #     end
  #   end.() || {0, 0, 0, 0},
  #   port: System.get_env("PORT") || 14000
  # ],
  http: [
    port: System.get_env("PORT") || 14000
  ],
  url: [host: System.get_env("URL_HOST"), port: System.get_env("URL_PORT") || 80],
  debug_errors: true,
  server: true,
  code_reloader: true,
  check_origin: false,
  watchers: [node: ["node_modules/brunch/bin/brunch", "watch", "--stdin",
                    cd: Path.expand("../assets", __DIR__)]]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# command from your terminal:
#
#     openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -keyout priv/server.key -out priv/server.pem
#
# The `http:` config above can be replaced with:
#
#     https: [port: 4000, keyfile: "priv/server.key", certfile: "priv/server.pem"],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :auction_web, AuctionWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},
      ~r{priv/gettext/.*(po)$},
      ~r{lib/auction_web/views/.*(ex)$},
      ~r{lib/auction_web/templates/.*(eex)$}
    ]
  ]

config :ueberauth, Ueberauth.Strategy.Github.OAuth,
  client_id: System.get_env("GITHUB_CLIENT_ID") || "d56a3ee4d38a342af999",
  client_secret: System.get_env("GITHUB_CLIENT_SECRET") || "f3717f94cb98cf7f632123fc589f38e5ac11a128"

config :ueberauth, Ueberauth.Strategy.Wechat.OAuth,
  client_id: System.get_env("WECHAT_APPID") || "wx65998e39016f4fa0",
  client_secret: System.get_env("WECHAT_SECRET") || "4923340552db56f51f889f239d69961e"