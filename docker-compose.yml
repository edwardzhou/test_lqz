version: '3'

volumes:
    uploads: {}

networks:
  auction-network:

services:
  auc-postgresql:
    build:
      context: ./postgresql
      dockerfile: Dockerfile
    image: "${DOCKER_REGISTRY_URL}/${DOCKER_PROJECT}/${ENV}/auction-postgresql"
    env_file:
      - .env
    restart: always
    tty: true
    ports:
      - "${PG_PORT}"
    networks:
      - "auction-network"
    deploy:
      replicas: 0
    volumes: [$PGDATA_VOLUME]
      # - /var/lib/pgdata_10:/var/lib/postgresql/data
  
  auc-nginx:
    depends_on:
      - auction-app
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: "${DOCKER_REGISTRY_URL}/${DOCKER_PROJECT}/${ENV}/auction-nginx"
    env_file:
      - .env
    restart: always
    tty: true
    ports:
      - "${NGINX_HTTP_PORT}:9080"
      - "${NGINX_ADMIN_HTTP_PORT}:9090"
    networks:
      - "auction-network"
    deploy:
      replicas: 2
      # update-config:
      #   parallelism: 1
      #   delay: 20s
      restart_policy:
        condition: on-failure

  auction-app:
    depends_on:
      - auc-postgresql
      # - auc-nginx
    build:
      context: ./auction
      dockerfile: Dockerfile #dockerfile.build
    image: "${DOCKER_REGISTRY_URL}/${DOCKER_PROJECT}/${ENV}/auction-app"
    volumes:
      - uploads:/app/uploads
    env_file:
      - .env
    restart: always
    tty: true
    ports: []
      # - "127.0.0.1:14000:14000"
      # - "127.0.0.1.14100:14100"
    networks:
      - "auction-network"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
